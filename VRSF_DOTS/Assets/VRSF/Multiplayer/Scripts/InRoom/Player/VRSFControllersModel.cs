using Photon.Pun;
using UnityEngine;
using VRSF.Core.Controllers;
using VRSF.Core.SetupVR;

namespace VRSF.Multiplayer
{
    /// <summary>
    /// Used to display a different body for the remote and local users
    /// Need to be placed under the COntrollers Transform object from the PlayerPrefab
    /// </summary>
    [RequireComponent(typeof(PhotonView), typeof(ControllerMeshListing))]
    public class VRSFControllersModel : MonoBehaviourPun
    {
        /// <summary>
        /// Attached to this object, contains a list of meshes based on a type of Device
        /// </summary>
        private ControllerMeshListing _controllersMesh;

        /// <summary>
        /// Reference to the controller generated by this script
        /// </summary>
        private GameObject _controllerInstance;

        private void Start()
        {
            // If this for the local player, the controller are set directly in SetupVR
            if (photonView.IsMine)
            {
                Destroy(gameObject);
            }
            else
            {
                _controllersMesh = GetComponent<ControllerMeshListing>();
                InstantiateRemoteControllers();
            }
        }

        private void OnDestroy()
        {
            // Destroy the remote controller
            if (_controllerInstance != null)
                Destroy(_controllerInstance);
        }

        /// <summary>
        /// Callback for whenever one of the player had sent its device info
        /// Generate the corresponding mesh for the used controllers
        /// </summary>
        /// <param name="info"></param>
        private void InstantiateRemoteControllers()
        {
            EDevice deviceUsed = (EDevice)photonView.Owner.CustomProperties[VRSFPlayer.DEVICE_USED];
            
            // If the other user use the simulator, we do not need to generate a controller
            if (HasControllers()) 
            {
                _controllerInstance = GameObject.Instantiate(_controllersMesh.ControllersPerDevice[deviceUsed], transform.parent);
                _controllerInstance.tag = "Untagged";

                for (int i = 0; i < _controllerInstance.transform.childCount; i++) 
                    _controllerInstance.transform.GetChild(i).tag = "Untagged";
            }
            

            bool HasControllers()
            {
                return deviceUsed != EDevice.SIMULATOR && deviceUsed != EDevice.NONE;
            }
        }
    }
}