using Photon.Pun;
using UnityEngine;
using VRSF.Core.Controllers;
using VRSF.Core.SetupVR;

namespace VRSF.Multiplayer
{
    /// <summary>
    /// Used to display a different body for the remote and local users
    /// Need to be placed under the COntrollers Transform object from the PlayerPrefab
    /// </summary>
    [RequireComponent(typeof(PhotonView), typeof(ControllerMeshListing))]
    public class VRSFControllersModel : MonoBehaviour
    {
        /// <summary>
        /// Attached to this object, contains a list of meshes based on a type of Device
        /// </summary>
        private ControllerMeshListing _controllersMesh;

        /// <summary>
        /// Reference to the controller generated by this script
        /// </summary>
        private GameObject _controllerInstance;

        private PhotonView _punView;

        private void Start()
        {
            _punView = GetComponent<PhotonView>();

            // If this for the local player, the controller are set directly in SetupVR
            if (_punView.IsMine)
            {
                Destroy(gameObject);
                return;
            }

            VRDeviceWasSet.Listeners += CallInstantiation;
            _controllersMesh = GetComponent<ControllerMeshListing>();
        }

        private void OnDestroy()
        {
            if (VRDeviceWasSet.IsMethodAlreadyRegistered(CallInstantiation))
            {
                VRDeviceWasSet.Listeners -= CallInstantiation;

                // Destroy the remote controller
                if (_controllerInstance != null)
                    Destroy(_controllerInstance);
            }
        }

        /// <summary>
        /// Callback for whenever one of the player had sent its device info
        /// Generate the corresponding mesh for the used controllers
        /// </summary>
        /// <param name="info"></param>
        private void CallInstantiation(VRDeviceWasSet info)
        {
            // If the player that has send his info is the one corresponding to this player and the remoteControllers dictionary doesn't contains this player yet
            if (info.Player.NickName == _punView.Owner.NickName)
            {
                if (_controllerInstance != null)
                    Destroy(_controllerInstance);

                // If the other user use the simulator, we do not need to generate a controller
                _controllerInstance = info.Player.DeviceUsed == EDevice.SIMULATOR ? null : GameObject.Instantiate(_controllersMesh.ControllersPerDevice[info.Player.DeviceUsed], transform.parent);
            }
            else if (_controllerInstance == null)
            {
                foreach (var player in VRSFBasicPlayersManager.PlayersInstances)
                {
                    // If the other user use the simulator, we do not need to generate a controller
                    if (player.UserId == _punView.Owner.UserId && player.DeviceUsed != EDevice.NONE)
                        _controllerInstance = info.Player.DeviceUsed == EDevice.SIMULATOR ? null : GameObject.Instantiate(_controllersMesh.ControllersPerDevice[info.Player.DeviceUsed], transform.parent);
                }
            }
        }
    }
}